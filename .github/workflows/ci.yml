on: [push]

jobs:
  file-drop-checks:
    name: File-drop checks
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}

      - name: Install file-drop node modules
        working-directory: file-drop
        run: npm i --production=false

      - name: ESLint
        working-directory: file-drop
        run: npm run lint -- --max-warnings=0

      - name: Prettier
        working-directory: file-drop
        run: npm run format

  demo-checks:
    name: Demo checks
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}

      - name: Install demo node modules
        working-directory: demo
        run: npm i --production=false

      - name: ESLint
        working-directory: demo
        run: npm run lint -- --max-warnings=0

      - name: Prettier
        working-directory: demo
        run: npm run format

  build-checks:
    name: Build checks
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}

      - name: Build file-drop
        working-directory: file-drop
        run: npm i --production=false && NODE_ENV=production npm run build

      - name: Build demo
        working-directory: demo
        run: npm i --production=false && NODE_ENV=production npm run build

  deploy:
    name: Deploy
    needs: [file-drop-checks, demo-checks, build-checks]
    runs-on: ubuntu-18.04
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout (v1)
        uses: actions/checkout@v1
        with:
          ref: ${{ github.ref }}

      - name: Read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}

      - name: Automated version bump
        uses: phips28/gh-action-bump-version@118c20934f93e82957e2e03b62782036f1baf53b
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGEJSON_DIR: file-drop

      - name: Build file-drop
        working-directory: file-drop
        run: npm i --production=false && NODE_ENV=production npm run build

      - name: Build demo
        working-directory: demo
        run: npm i --production=false && NODE_ENV=production npm run build

      - name: Publish gh-pages
        uses: JamesIves/github-pages-deploy-action@3.1.5
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          BRANCH: gh-pages
          FOLDER: demo/dist
          TARGET_FOLDER: .
          CLEAN: true

      - name: Publish to npm
        working-directory: file-drop/dist
        run: npm publish --access public
        env:
          NPM_CONFIG_TOKEN: ${{secrets.NPM_CONFIG_TOKEN}}
